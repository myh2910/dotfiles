" Evan Chen's .vimrc

set nocompatible
filetype plugin indent on
syntax on

" Arch Linux default mana is 80%, all but CoC
let g:mana = get(g:, 'mana', -1)
if g:mana < 0
	if filereadable('/bin/pacman')
		let g:mana = 80
	end
		let g:mana = 60
end

" {{{ PLUGINS
if g:mana > 0
	call plug#begin('~/.vim/plugged')
	if g:mana >= 20
		Plug 'airblade/vim-gitgutter'
		Plug 'aymericbeaumet/vim-symlink'
		Plug 'haya14busa/incsearch.vim'
		Plug 'nathanaelkane/vim-indent-guides'
		Plug 'svintus/vim-editexisting'
		Plug 'tpope/vim-fugitive'
		Plug 'vim-airline/vim-airline'
		Plug 'vim-airline/vim-airline-themes'
		Plug 'vim-scripts/YankRing.vim'
	endif
	if g:mana >= 40
		Plug 'avakhov/vim-yaml',             { 'for' : 'yaml' }
		Plug 'cespare/vim-toml',             { 'for' : 'toml' }
		Plug 'chutzpah/icalendar.vim',       { 'for' : 'icalendar' }
		Plug 'dag/vim-fish',                 { 'for' : 'fish' }
		Plug 'davidhalter/jedi-vim',         { 'for' : 'python' }
		Plug 'farseer90718/vim-taskwarrior', { 'for' : 'taskedit' }
		Plug 'hura/vim-asymptote',           { 'for' : 'asy' }
		Plug 'kchmck/vim-coffee-script',     { 'for' : 'coffee' }
		Plug 'kovisoft/slimv',               { 'for' : 'lisp' }
		Plug 'mboughaba/i3config.vim',       { 'for' : 'i3config' }
		Plug 'mgedmin/python-imports.vim',   { 'for' : 'python' }
		Plug 'petRUShka/vim-sage',           { 'for' : 'sage' }
		Plug 'plasticboy/vim-markdown',      { 'for' : 'markdown' }
		Plug 'tools-life/taskwiki',          { 'for' : ['vimwiki', 'markdown'] }
		Plug 'vim-python/python-syntax',     { 'for' : 'python' }
		Plug 'vimwiki/vimwiki',              { 'for' : ['vimwiki', 'markdown'] }
		Plug 'vim-latex/vim-latex'
		" Leader keys that are forced on me by LaTeX
		" <Leader>ll -> pdflatex compile
		" <Leader>lv -> latex viewer
		" <Leader>rf -> refresh folds (LaTeX)
	endif
	if g:mana >= 60
		Plug 'FelikZ/ctrlp-py-matcher'
		Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle' }
		Plug 'junegunn/fzf'
		Plug 'junegunn/fzf.vim'
		Plug 'mg979/vim-visual-multi'
		Plug 'preservim/nerdtree'
	endif
	if g:mana >= 80
		Plug 'ctrlpvim/ctrlp.vim'
		Plug 'vim-ctrlspace/vim-ctrlspace'
		Plug 'Shougo/echodoc'
		Plug 'dense-analysis/ale'
	endif
	if g:mana >= 100
		Plug 'ludovicchabant/vim-gutentags'
		Plug 'preservim/tagbar'
		Plug 'neoclide/coc.nvim', {'branch': 'release'}
		Plug 'rodrigore/coc-tailwind-intellisense', {'do': 'npm install'}
		Plug 'neoclide/jsonc.vim', { 'for' : 'json' }
	endif
	" }}}
	" A MILLION SETTINS FOR ADDONS {{{
	" https://github.com/junegunn/fzf.vim/issues/374
let $FZF_DEFAULT_OPTS="--ansi --preview-window 'right:60%' --layout reverse --margin=1,4 --preview 'bat --color=always --style=header,grid --line-range :300 {}'"
let NERDTreeIgnore = [
	\	'\.pyc$',
	\	'\.pyo$',
	\	'\~$',
	\	'\.aux$',
	\	'\.fdb_latexmk$',
	\	'\.fls$',
	\	'\.log$',
	\	'\.out$',
	\	'\.pre$',
	\	'\.pytxcode$',
	\	'\.pytxmcr$',
	\	'\.pytxpyg$',
	\	'\.synctex.gz$',
	\	'pythontex_data.pkl',
	\	'\.png$',
	\	'\.jpg$',
	\	'\.pdf$',
	\	'-[0-9]\+\.asy$',
	\	]
let NERDTreeShowLineNumbers = 1
let g:completor_filetype_map = {}
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_cmd= 'CtrlPBuffer'
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
let g:ctrlp_map = '<c-b>'
let g:ctrlp_max_files = 0
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
let g:EasyMotion_keys = "aoeuidhtns;qjkxbmwvz',.pyfgcrl/"
let g:echodoc_enable_at_startup=1
let g:echodoc#type='popup'
let g:far#source='rg'
let g:fzf_layout = { 'window': { 'width': 0.7, 'height': 0.4 } }
let g:gitgutter_map_keys = 0
let g:gutentags_cache_dir = '~/.vim/tags/'
let g:gutentags_file_list_command = {
	\ 'markers': {
			\ '.git': 'sh /home/evan/dotfiles/sh-scripts/guten-targets-git.sh',
			\ },
	\ }
let g:indent_guides_auto_colors = 0
let g:indent_guides_enable_on_vim_startup = 1
let g:jedi#show_call_signatures = 0
let g:vimwiki_filetypes = ['markdown']
let g:yankring_history_dir = '$HOME/.cache/'
let grepprg = "ag --nogroup --nocolor"

" File-type specific edits
Plug 'maralla/completor.vim', { 'for' :
	\ ['css', 'python', 'javascript', 'sh', 'fish', 'vim',
	\ 'json', 'jsonc', 'tex', 'typescript', 'go',
	\ 'gitcommit', 'gitconfig'] }
" Plug 'leanprover/lean.vim'
let g:python_highlight_all = 1
let g:taskwiki_disable_concealcursor=1
let g:vim_markdown_auto_insert_bullets = 0
let g:vim_markdown_conceal = 0
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_math = 1
let g:vim_markdown_new_list_item_indent = 0
let g:vimwiki_global_ext = 0
let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.mkd'}]

	" Airline auto from vim-plugins
	let g:airline#extensions#coc#enabled = 1
	let g:airline#extensions#ctrlspace#enabled = 1
	let g:airline#extensions#fugitive#enabled = 1
	let g:airline#extensions#tabline#buffer_nr_show = 1
	let g:airline#extensions#tabline#ctrlspace_show_tab_nr = 0
	let g:airline#extensions#tabline#current_first = 0
	let g:airline#extensions#tabline#enabled = 1
	let g:airline#extensions#tabline#show_buffers = 1
	let g:airline#extensions#tabline#show_tabs = 1
	let g:airline_powerline_fonts = 1
	let g:airline_theme='wombat'
	let g:CtrlSpaceStatuslineFunction =
	\ "airline#extensions#ctrlspace#statusline()"
	function! AirlineSetup()
		let g:airline_section_a = airline#section#create_left(['mode', 'readonly',])
		let g:airline_section_b = airline#section#create_left(['file', ])
		let g:airline_section_c = airline#section#create_left(['branch', 'hunks'])
		let g:airline_section_gutter = airline#section#create(['%<', 'tagbar', '%='])
		let g:airline_section_x = airline#section#create_right(['crypt', 'paste', 'iminsert', ' %v'])
		let g:airline_section_y = airline#section#create(['spell', 'maxlinenr', ])
		let g:airline_section_z = airline#section#create(['filetype'])
		let g:airline_mode_map = {
				\ '__'     : '-',
				\ 'c'      : 'C',
				\ 'i'      : 'I',
				\ 'ic'     : 'I',
				\ 'ix'     : 'I',
				\ 'n'      : 'N',
				\ 'multi'  : 'M',
				\ 'ni'     : 'N',
				\ 'no'     : 'N',
				\ 'R'      : 'R',
				\ 'Rv'     : 'R',
				\ 's'      : 'S',
				\ 'S'      : 'S',
				\ ''     : 'S',
				\ 't'      : 'T',
				\ 'v'      : 'V',
				\ 'V'      : 'V',
				\ ''     : 'V',
				\ }
		let s:IA = [ 'gray15', 'gray80', 35, 234 ]
		let g:airline#themes#wombat#palette.inactive = airline#themes#generate_color_map(s:IA, s:IA, s:IA)
		let g:airline#extensions#whitespace#checks = ['indent', 'trailing', 'mixed-indent-file', 'conflicts']
	endfunction
	autocmd User AirlineAfterTheme call AirlineSetup()

	" ALE + CoC
	let g:ale_disable_lsp = 1
	let g:ale_echo_msg_error_str = 'E'
	let g:ale_echo_msg_format = '[%severity%] [%linter%] %s'
	let g:ale_echo_msg_warning_str = 'W'
	let g:ale_fix_on_save = 1
	let g:ale_keep_list_window_open = 0
	let g:ale_open_list = 0
	let g:ale_python_mypy_enabled = 0
	let g:ale_python_mypy_options = "--ignore-missing-imports"
	let g:ale_set_balloon= 1
	let g:ale_set_loclist = 1
	let g:ale_set_quickfix = 1
	let g:ale_sign_column_always = 1
	let g:ale_sign_error = '#'
	let g:ale_sign_warning = '>'
	let g:coc_global_extensions = [
		\ 'coc-css',
		\ 'coc-html',
		\ 'coc-htmldjango',
		\ 'coc-json',
		\ 'coc-markdownlint',
		\ 'coc-pyright',
		\ 'coc-sh',
		\ 'coc-snippets',
		\ 'coc-tabnine',
		\ 'coc-tailwind-intellisense',
		\ 'coc-texlab',
		\ 'coc-tsserver',
		\ 'coc-vimlsp',
		\ 'coc-yaml',
		\ ]
	if $USER ==# 'evan'
	endif
	call plug#end()
endif
" }}}

" Vim server {{{
if g:mana >= 100
	function StartServer()
		if !empty(argv(1)) | return | endif
		let l:target = expand('%:p')
		let l:gitdir = FugitiveGitDir()
		" Don't run the server check cases in certain cases
		if empty(l:gitdir) || empty(l:target) | return | endif
		if stridx(l:target, ".git") != -1 | return | endif
		" If we find a server, offer to load there instead
		if stridx(serverlist(), l:gitdir) != -1
			let l:response = input("Open in existing server? (y/n) ", "")
			if stridx(l:response, 'y') != -1 || stridx(l:response, 'Y') != -1
				bdelete
				call remote_send(l:gitdir, "<ESC>:vsplit " . l:target . "<CR>")
				if winnr('$') == 1 && tabpagenr('$') == 1 && empty(expand('%:p')) | quit | endif
			endif
		elseif empty(v:servername)
			try
				call remote_startserver(l:gitdir)
			catch
				echo "Couldn't start a remote server"
			endtry
		endif
	endfunction
	autocmd VimEnter * call StartServer()
endif
" }}}

" Arrow key shortcuts {{{
function! DelEmptyLineAbove()
	if line(".") == 1
		return
	endif
	let l:line = getline(line(".") - 1)
	if l:line =~ '^\s*$'
		let l:colsave = col(".")
		.-1d
		"silent normal!
		call cursor(line("."), l:colsave)
	endif
endfunction
function! AddEmptyLineAbove()
	let l:scrolloffsave = &scrolloff
	" Avoid jerky scrolling with ^E at top of window
	set scrolloff=0
	call append(line(".") - 1, "")
	let &scrolloff = l:scrolloffsave
endfunction
function! DelEmptyLineBelow()
	if line(".") == line("$")
		return
	endif
	let l:line = getline(line(".") + 1)
	if l:line =~ '^\s*$'
		let l:colsave = col(".")
		.+1d
		''
		call cursor(line("."), l:colsave)
	endif
endfunction
function! AddEmptyLineBelow()
	call append(line("."), "")
endfunction
nnoremap < <<
nnoremap > >>
map <Left> <
map <Right> >
map <Up> :call DelEmptyLineAbove()<CR>
map <Down> :call AddEmptyLineAbove()<CR>
" }}}

" INDENTATION COMMANDS {{{
" candidate for deletion since i never use these
" Jump to the next or previous line that has the same level or a lower
" level of indentation than the current line.
"   exclusive (bool): Motion is exclusive / Motion is inclusive
"   fwd (bool): Go to next line / Go to prev line
"   lowerlevel (bool): Go to line with (lower/same) indentation level
"   skipblanks (bool): Skip blank lines
function! NextIndent(exclusive, fwd, lowerlevel, skipblanks)
	let line = line('.')
	let column = col('.')
	let lastline = line('$')
	let indent = indent(line)
	let stepvalue = a:fwd ? 1 : -1
	while (line > 0 && line <= lastline)
		let line = line + stepvalue
		if ( ! a:lowerlevel && indent(line) == indent ||
					\ a:lowerlevel && indent(line) < indent)
			if (! a:skipblanks || strlen(getline(line)) > 0)
				if (a:exclusive)
					let line = line - stepvalue
				endif
				exe line
				exe "normal " column . "|"
				return
			endif
		endif
	endwhile
endfunction

" Moving back and forth between lines of same or lower indentation.
nnoremap <silent> [u :call NextIndent(0, 0, 0, 1)<CR>
nnoremap <silent> ]u :call NextIndent(0, 1, 0, 1)<CR>
nnoremap <silent> [U :call NextIndent(0, 0, 1, 1)<CR>
nnoremap <silent> ]U :call NextIndent(0, 1, 1, 1)<CR>
vnoremap <silent> [u <Esc>:call NextIndent(0, 0, 0, 1)<CR>m'gv''
vnoremap <silent> ]u <Esc>:call NextIndent(0, 1, 0, 1)<CR>m'gv''
vnoremap <silent> [U <Esc>:call NextIndent(0, 0, 1, 1)<CR>m'gv''
vnoremap <silent> ]U <Esc>:call NextIndent(0, 1, 1, 1)<CR>m'gv''
onoremap <silent> [u :call NextIndent(0, 0, 0, 1)<CR>
onoremap <silent> ]u :call NextIndent(0, 1, 0, 1)<CR>
onoremap <silent> [U :call NextIndent(1, 0, 1, 1)<CR>
onoremap <silent> ]U :call NextIndent(1, 1, 1, 1)<CR>
" }}}

" improved f/F/t/T/semicolon {{{
autocmd BufEnter * let b:evan_last_finder_line=0
autocmd BufEnter * let b:evan_last_finder_char=''
autocmd BufEnter * let b:evan_last_finder_dir=0
autocmd BufEnter * let b:evan_last_finder_eps=0

function EvanFindChar(direction, epsilon, repeat)
	let b:evan_last_finder_line = line('.')
	if ! a:repeat
		let b:evan_last_finder_char = nr2char(getchar())
	endif
	let b:evan_last_finder_dir = a:direction
	let b:evan_last_finder_eps = a:epsilon
	while (col('.') < col('$') - 1 && a:direction == 1) || (col('.') > 1 && a:direction == -1)
		if (a:direction == 1)
			normal l
		else
			normal h
		endif
		if getline('.')[col('.') + a:epsilon] ==# b:evan_last_finder_char
			return
		endif
	endwhile
endfunction

function EvanSemicolon()
	if get(b:, "evan_last_finder_dir", 0) == 0
		call feedkeys(':')
	elseif get(b:, "evan_last_finder_line", 0) != line('.')
		call feedkeys(':')
	elseif get(b:, "evan_last_finder_char", '') ==# ''
		call feedkeys(':')
	else
		call EvanFindChar(b:evan_last_finder_dir, b:evan_last_finder_eps, 1)
	endif
endfunction

" Don't need colon anymore
nnoremap <silent> f :call EvanFindChar(1, -1, 0)<CR>
nnoremap <silent> F :call EvanFindChar(-1, -1, 0)<CR>
nnoremap <silent> t :call EvanFindChar(1, 0, 0)<CR>
nnoremap <silent> T :call EvanFindChar(-1, -2, 0)<CR>
nnoremap <silent> ; :call EvanSemicolon()<CR>
" }}}

" Procedure for shell commands {{{
" https://vim.fandom.com/wiki/Display_output_of_shell_commands_in_new_window
function! s:ExecuteInShell(command)
  let command = join(map(split(a:command), 'expand(v:val)'))
  let winnr = bufwinnr('^' . command . '$')
  silent! execute  winnr < 0 ? 'botright vnew ' . fnameescape(command) : winnr . 'wincmd w'
  setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile nowrap number
  echo 'Execute ' . command . '...'
  silent! execute 'silent %!'. command
  silent! redraw
  silent! execute 'au BufUnload <buffer> execute bufwinnr(' . bufnr('#') . ') . ''wincmd w'''
  silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . command . ''')<CR>'
  echo 'Shell command ' . command . ' executed.'
endfunction
command! -complete=shellcmd -nargs=+ Shell call s:ExecuteInShell(<q-args>)
" }}}

" CoC based maps {{{
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
	if (index(['vim','help'], &filetype) >= 0)
		execute 'h '.expand('<cword>')
	elseif (coc#rpc#ready())
		call CocActionAsync('doHover')
	else
		execute '!' . &keywordprg . " " . expand('<cword>')
	endif
endfunction
nmap <silent> gd :vsplit<CR><Plug>(coc-definition)
nmap <silent> gy :vsplit<CR><Plug>(coc-type-definition)
nmap <silent> gr :vsplit<CR><Plug>(coc-references)
nmap cv <Plug>(coc-rename)
nmap <silent> [g :ALEPreviousWrap<CR>
nmap <silent> ]g :ALENextWrap<CR>
" }}}

" system clipboard
vnoremap <silent> <C-C> "+y
nnoremap <silent> <C-c> :%y+<CR>
nnoremap <silent> <C-V> "+p
vnoremap <silent> <C-X> "+d
" Navigate buffers with backspace
nnoremap <Backspace> :CtrlSpaceGoUp<CR>
nnoremap <S-Backspace> :CtrlSpaceGoDown<CR>
" Disable ex mode entirely
nmap Q <nop>

" Buffer and ctrlP
command! -bang -nargs=* BLinesExtra
			\ call fzf#vim#grep(
			\ 'rg --with-filename --column --line-number --no-heading . '.fnameescape(expand('%:p')), 1,
			\ fzf#vim#with_preview({'options': '--layout reverse --query '.shellescape(<q-args>).' --with-nth=4.. --delimiter=":"'}, 'right:50%'))
nnoremap <C-/> :BLinesExtra<CR>

" incsearch
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" write all
function EvanSave()
	let b:evan_last_finder_line=0
	let b:evan_last_finder_char=''
	let b:evan_last_finder_dir=0
	let b:evan_last_finder_eps=0
	silent wall
	echo '"' . expand("%") . '" ' . line("$") . "L, " . (line2byte(line("$")+1) - 1) . "B written"
endfunction
nnoremap <CR> :call EvanSave()<CR>

" MINUS KEYBINDINGS (window manager) {{{
" CTRL-W is too annoying to type, repurpose minus
" ------------------------------------------
nnoremap -h <C-w>h
nnoremap -l <C-w>l
nnoremap -j <C-w>j
nnoremap -k <C-w>k
" split
nnoremap -s <C-w>s
" n for new; easier to reach than -v
nnoremap -n <C-w>v
" use WASD-like keys for quickly shoving around windows
" since the minus sign is on the right hand side
nnoremap -o <C-w>H
nnoremap -u <C-w>L
nnoremap -. <C-w>K
nnoremap -e <C-w>J
" maximize window
nnoremap -a <C-w>o
nnoremap <silent> -f <C-w>v:CtrlPRoot<CR>
" recent
nnoremap <silent> -r <C-w>v:CtrlPMRU<CR>
" close
nnoremap <silent> -c <C-w>v:CtrlPCurFile<CR>
nnoremap <silent> -b <C-w>v:CtrlPBuffer<CR>
nnoremap -w <C-w><C-w>

" make notes
" https://www.gilesorr.com/blog/vim-tips-23-scratch-buffer.html
function NewScratch()
    split scratch-buffer.mkd
    setlocal buftype=nofile
    setlocal bufhidden=hide
    setlocal noswapfile
endfunction
nnoremap <silent> -s :call NewScratch()<CR>
" }}}
" SPACE BAR KEYBINDINGS {{{
" Not setting leader key because otherwise extensions mess with me
" ALE Details
nnoremap <Space>a :ALEDetail<CR>
" show syntax group
nnoremap <Space>y :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
" e is for emulator
nnoremap <Space>e :let $VIM_DIR=expand('%:p:h')<CR>:silent !xfce4-terminal --working-directory="$VIM_DIR" &<CR>:redraw!<CR>
" fold by indent
nnoremap <Space>z :set foldmethod=indent<CR>
" NerdTree
nnoremap <silent> <Space>t :NERDTreeFocus<CR>
" smart find and replace
nnoremap <silent> <Space>h :Farr<CR>

" Ctrl P
nnoremap <silent> <Space>f :CtrlPRoot<CR>
nnoremap <silent> <Space>r :CtrlPMRU<CR>
nnoremap <silent> <Space>c :CtrlPCurFile<CR>
nnoremap <silent> <Space>b :CtrlPBuffer<CR>

" git status
nnoremap <Space>s :Git<CR>
" other git commands
nnoremap <Space>gb :Git blame<CR>
nnoremap <Space>gd :Gdiffsplit<CR>
nnoremap <Space>gw :Gwrite<CR>
" git commit (current file)
nnoremap <Space>gc :Git commit %<CR>
" git commit all
nnoremap <Space>ga :Git commit --all<CR>
" git create commit --amend [edit commit]
nnoremap <Space>gec :Git commit --amend<CR>
" git commit --amend current file [edit write]
nnoremap <Space>gew :Git commit % --amend<CR>
" git commit --amend all [edit all]
nnoremap <Space>gea :Git commit --all --amend<CR>
" git undo (really git read)
nnoremap <Space>gu :Gread<CR>
" }}}
" Smart window close replacement for :q {{{
function! EvanClose()
	if winnr('$') == 1
		if tabpagenr('$') == 1
			bdelete
			if expand('%:p') == ''
				quit
			endif
		else
			bdelete
		endif
	elseif expand('%:l') == '__doc__'
		bdelete
	else
		close
	endif
endfunction
nnoremap <Space>- :call EvanClose()<CR>
" }}}



" ------------------------------------------
" SETTINGS
" ------------------------------------------
colorscheme reclipse
" autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
" autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
" autocmd InsertLeave * if pumvisible() == 0|pclose|endif

" Settings {{{
set backupdir=~/.vim/tmp
set directory=~/.vim/tmp

set backspace=indent,eol,start
set backup     " keep a backup file
set cm=blowfish2
set completeopt=menuone,noselect,preview
set conceallevel=2
set cursorline
set cursorlineopt=number
set foldlevelstart=3
set guicursor+=n-v-c:blinkon0
set guifont=Monospace\ 11
set hidden
set history=50 " keep 50 lines of command line history
set hlsearch
set ignorecase
set incsearch  " do incremental searching
set laststatus=2
set linebreak
set list
set listchars=tab:\|\ ,trail:_
set mouse=a    " mouse enabled
set noautoindent
set nohlsearch
set noshowmode " don't need mode shown if we have airline
set number
set omnifunc=ale#completion#OmniFunc
set ruler      " show the cursor position all the time
set scrolloff=5
set shell=/bin/fish
set shellslash
set shiftwidth=2
set showbreak=_
set showcmd    " display incomplete commands
set smartcase
set spell
set splitright
set t_Co=256
set tabstop=2
set textwidth=0
set updatetime=100
set wrap
set wrapmargin=0
" }}}

" {{{ Special filetype configuration
" ------------------------------------------
autocmd BufNewFile,BufRead *.asy setfiletype asy
autocmd BufNewFile,BufRead *.ly setfiletype lilypond
autocmd BufNewFile,BufRead *.less setfiletype css
autocmd BufNewFile,BufRead *.ics setfiletype icalendar
autocmd FileType htmldjango let b:enabled_fixers=['html-beautify', 'remove_trailing_lines', 'trim_whitespace']
set runtimepath+=/usr/local/lilypond/usr/share/lilypond/current/vim/
" }}}

" More lame LaTeX stuff {{{
let g:Tex_DefaultTargetFormat = 'pdf'
let g:Tex_GotoError = 1
let g:Tex_Leader2='\\'
let g:Tex_SmartKeyDot = 0
let g:Tex_SmartKeyQuote = 0
let g:Tex_ViewRule_pdf = 'zathura'
let g:Tex_comment_nospell= 1
let g:tex_flavor='latex'
function! SyncTexForward()
	exec "silent !zathura --synctex-forward ".line(".").":".col(".").":%:p %:p:r.pdf &"
endfunction
let g:tex_conceal='agms'
let g:xml_syntax_folding=1
" }}}

let mapleader="="
let maplocalleader = ","
" vim: ft=vim fdm=marker
